//На доске написана последовательность n целых чисел. Играют двое. На очередном ходе игрок выбирает число с правого или с левого края последовательности.
//Затем это число стирается и последовательность становится на одно число меньше, а ход переходит к противнику. Выигрывает тот, кто наберет в сумме больше.
//Написать программу, определяющую победителя в конкретной игре, при условии, что игроки будут играть оптимально.
//
//Входные данные:
//В первой строке входного файла INPUT.TXT записано целое число n(0 < n < 100).Во второй строке через пробел заданы n натуральных чисел, не превосходящих 1000.
//
//Выходные данные:
//В единственную строку выходного файла OUTPUT.TXT нужно вывести 1, если победит первый игрок, 2 – если победит второй игрок и 0 – в случае ничьей.

#pragma warning(disable : 4996)
#include <iostream>
#include <fstream>
#include <conio.h>		
#include <stdio.h>
#include <gtest\gtest.h>
using namespace std;

class Player
{
public:
	int Play;	
	int Game(int, int, int*);
	Player()
	{
		Play = 0;
	}
};
int Player::Game(int i, int n, int *Array)
{	
		if (Array[0] < Array[i])
		{
			Play += Array[i];
			cout << "\nНаибольшее крайнее число = " << Array[i] << "\n";
		}

		else 
		{
			Play += Array[0];
			cout << "\nНаибольшее крайнее число = " << Array[0] << "\n";
			for (int j = 0; j < i; j++)Array[j] = Array[j + 1];
		}
		for (int a = 0; a < i-1  ; a ++)
		{
			cout << Array[a] << " ";
		}

	return Play;
}

TEST(PlayerTest, StartedGameAccountEmpty)
{
	Player Player_A;
	EXPECT_EQ(0, Player_A.Play);
}

void Result(int player_1, int player_2)
{
	int a;
	a = 0;
	ofstream OUTPUT("OUTPUT.TXT", ios_base::trunc);
	if (player_1 > player_2)
	{
		OUTPUT << 1;
		cout << "\nПобеда игрока 1\n";
	}
	else if (player_1 < player_2)
	{
		OUTPUT << 2;
		cout << "\nПобеда игрока 2\n";
	}
	else
	{
		OUTPUT << 0;
		cout << "\nНичья!\n";
	}
}

int main (int argc,char * argv[])														// Заголовок главной функции
{
	testing::InitGoogleTest(&argc, argv);
	setlocale(LC_ALL, "Rus");															// Функция для работы с русским языком

	int k, n;
	int *Array=NULL;
	cout << "Для ввода новой последовательности нажмите 1\nДля ввода последовательности из файла нажмите 2\n";
	cin >> k;
	int p = 1;
	if (k == p)
	{
		ofstream INCLUDE("INPUT.TXT", ios_base::trunc);
		n = rand() % 40 + 20;
		INCLUDE << n << endl;
		cout << "Количество чисел в ряду:\n" << n;
		Array = new int[n + 2];
		cout << "\nНачальный ряд чисел:\n";
		for (int i = 0; i < n; ++i)
		{
			Array[i] = rand() % 9 + 1; 
			cout << Array[i] <<	" ";   
			INCLUDE << Array[i] << " ";
		}							   
	}								   
									   
	else if (k == 2)
	{
		ifstream INPUT("INPUT.TXT");
		INPUT >> n;
		Array = new int[n + 2];
		for (int i = 0; i < n; i++)
		INPUT >> Array[i];
	}
	else
	{
		cout << "Вы ввели неправильное значение\n";
		system("pause");
		system("cls");
	}

	Array[n] = Array[n-1];
	Array[n + 1] = Array[n];
			 
	Player A;
	cout << "\n";
	RUN_ALL_TESTS();
	Player B;
			 
	for (int i=n; i > n /5; i --)
	{				
		A.Game(i, n, Array);
		cout << "\nИгрок 1: " << A.Play << "\n";
		i--;
		B.Game(i, n, Array);
		cout << "\nИгрок 2: " << B.Play << "\n";
		n--;
	}
	if (n % 2 != 0)
	{
		cout << "\nНаибольшее крайнее число = " << Array[n / 2] << "\n";
		A.Play += Array[n / 2];
		cout << "\nИгрок 1: " << A.Play << "\n";
	}
Result(A.Play, B.Play);

	cout << "\n";
	system("pause");
	return 0;
}
